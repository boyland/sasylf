/*
 * Based on Sun's example Java grammar from JavaCC.
 * The copyright statement for the Java grammar is below.
 * Used by permission via the JavaCC license from Sun, included as the LICENSE
 * in this directory.  This file is thus covered by both the Eclipse Public License
 * used by SASyLF and Sun's license for JavaCC.
 */

/*
 * Copyright Â© 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */

options {
  JAVA_UNICODE_ESCAPE = true;
  STATIC = false;
}

PARSER_BEGIN(DSLToolkitParser)

package edu.cmu.cs.sasylf.parser;

import edu.cmu.cs.sasylf.ast.*;

import static edu.cmu.cs.sasylf.util.Util.*;
import edu.cmu.cs.sasylf.util.*;

import java.io.*;
import java.util.*;

public class DSLToolkitParser {
    public static String currentFile = "NONE";

    public static CompUnit read(File f) throws FileNotFoundException, ParseException {
        try {
                        DSLToolkitParser parser;
                        parser = new DSLToolkitParser(new FileInputStream(f),"UTF-8");
                        currentFile = f.toString();
                        return parser.CompilationUnit();
        } catch (ParseException e) {
                System.err.println(e.getMessage());
                //ErrorHandler.report(e.getMessage(), null);
                throw e;
                //return null; // unreachable
        }
    }
    
    public static CompUnit read(String filename, InputStream is) throws ParseException {
      DSLToolkitParser parser = new DSLToolkitParser(is,"UTF-8");
      currentFile = filename;
      return parser.CompilationUnit();
    }

    boolean isTermNoBAR() {
		return (getToken(1).kind == IDENTIFIER && getToken(2).kind != ASSIGN)
	        /* || (getToken(1).kind == DOT && notNL(getToken(2).specialToken)) */
			|| getToken(1).kind == STRING_LITERAL
			|| getToken(1).kind == OPERATOR
			|| getToken(1).kind == COLON
			|| getToken(1).kind == SEMICOLON
			|| getToken(1).kind == MINUS
			|| getToken(1).kind == COMMA
			|| getToken(1).kind == CASE
			|| getToken(1).kind == END
			|| getToken(1).kind == INTEGER_LITERAL;
			/*|| getToken(1).kind == LBRACE;*/
    }

    boolean isTerm() {
    	return isTermNoBAR() || getToken(1).kind == OR;      }

	boolean notNL(Token tok) {
		return tok == null || tok.kind != NL && notNL(tok.specialToken);
	}

    boolean isTermNoNL() {
    	boolean result = isTerm();
		return result && notNL(getToken(1).specialToken);
			/*|| getToken(1).kind == LBRACE;*/
    }

    boolean lParenNoNL() {
    	return getToken(1).kind == LPAREN && notNL(getToken(1).specialToken);
    }

    boolean isVarBindingArg() {
		return (getToken(1).kind == IDENTIFIER && getToken(2).kind == RBRACK);
    }

    boolean isBinding() {
		return getToken(1).kind == IDENTIFIER && getToken(2).kind == LBRACK;
    }

    boolean isRulePart() {
		return getToken(1).kind == MINUS
			&& (getToken(2).kind == IDENTIFIER || getToken(2).kind == INTEGER_LITERAL);
    }

    Variable getVar(Token t) {
		Variable v = vars.get(t.image);
		if (v == null) {
		    v = new Variable(t.image, new Location(t));
		    vars.put(t.image, v);
		}
		return v;
    }

    NonTerminal getNonTerminal(Token t) {
		NonTerminal nt = nts.get(t.image);
		if (nt == null) {
		    nt = new NonTerminal(t.image, new Location(t));
		    nts.put(t.image, nt);
		}
		return nt;
    }
    Element getElement(Token t) {
		Terminal tm = ts.get(t.image);
		if (tm != null) {
		    return new Terminal(t.image, new Location(t));
        } else {
		    NonTerminal nt_old = nts.get(t.image);
		    NonTerminal nt = new NonTerminal(t.image, new Location(t));
		    if (nt_old == null) {
		    	nts.put(t.image, nt);
		    }
		    return nt;
		}
    }
    Clause clauseFor(Token t) {
    	Element e = getElement(t);
   	  	Clause cl = new Clause(e);
   	  	cl.getElements().add(e);
   	  	return cl;
    }
    Terminal addTerminal(Token t) {
		return addTerminal(t, t.image);
    }
    Terminal addTerminal(Token t, String s) {
		Terminal tm = new Terminal(s, new Location(t));
		ts.put(s, tm);
		return tm;
    }

    private Map<String, Variable> vars = new HashMap<String, Variable>();
    private Map<String, NonTerminal> nts = new HashMap<String, NonTerminal>();
    private Map<String, Terminal> ts = new HashMap<String, Terminal>();
}

PARSER_END(DSLToolkitParser)


/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\r"
| "\f"
}

SPECIAL_TOKEN : 
{
	< NL: "\n" >
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < PACKAGE: "package" >
| < JUDGMENT: "judgment" >
| < TERMINALS: "terminals" >
| < PREMISE: "premise" >
| < SYNTAX: "syntax" >
| < THEOREM: "theorem" >
| < LEMMA: "lemma" >
| < FORALL: "forall" >
| < EXISTS: "exists" >
| < BY: "by" >
| < RULE: "rule" >
| < IS: "is" >
| < ON: "on" >
| < END: "end" >
| < CASE: "case" >
| < ANALYSIS: "analysis" >
| < ASSUMES: "assumes" >
| < SUBSTITUTION: "substitution" >
| < INDUCTION: "induction" >
| < INVERSION: "inversion" >
| < WEAKENING: "weakening" >
| < EXCHANGE: "exchange" >
| < CONTRACTION: "contraction" >
| < HYPOTHESIS: "hypothesis" >
| < UNPROVED: "unproved" >
| < SOLVE: "solve" >
| < AND: "and" >
| < PROOF: "proof" >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        <DECIMAL_FLOATING_POINT_LITERAL>
      | <HEXADECIMAL_FLOATING_POINT_LITERAL>
  >
|
  < #DECIMAL_FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<DECIMAL_EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<DECIMAL_EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <DECIMAL_EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<DECIMAL_EXPONENT>)? ["f","F","d","D"]
  >
|
  < #DECIMAL_EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < #HEXADECIMAL_FLOATING_POINT_LITERAL:
        "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])+ (".")? <HEXADECIMAL_EXPONENT> (["f","F","d","D"])?
      | "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])* "." (["0"-"9","a"-"f","A"-"F"])+ <HEXADECIMAL_EXPONENT> (["f","F","d","D"])?
  >
|
  < #HEXADECIMAL_EXPONENT: ["p","P"] (["+","-"])? (["0"-"9"])+ >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* horizontal bar */

TOKEN :
{
  < BAR:
      "---" ( "-" )*
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<PART_LETTER>)* >
|
  < #LETTER:
      [  // all chars for which Character.isIdentifierStart is true
         "$",
         "A"-"Z",
         "_",
         "a"-"z",
         "\u00a2"-"\u00a5",
         "\u00aa",
         "\u00b5",
         "\u00ba",
         "\u00c0"-"\u00d6",
         "\u00d8"-"\u00f6",
         "\u00f8"-"\u021f",
         "\u0222"-"\u0233",
         "\u0250"-"\u02ad",
         "\u02b0"-"\u02b8",
         "\u02bb"-"\u02c1",
         "\u02d0"-"\u02d1",
         "\u02e0"-"\u02e4",
         "\u02ee",
         "\u037a",
         "\u0386",
         "\u0388"-"\u038a",
         "\u038c",
         "\u038e"-"\u03a1",
         "\u03a3"-"\u03ce",
         "\u03d0"-"\u03d7",
         "\u03da"-"\u03f3",
         "\u0400"-"\u0481",
         "\u048c"-"\u04c4",
         "\u04c7"-"\u04c8",
         "\u04cb"-"\u04cc",
         "\u04d0"-"\u04f5",
         "\u04f8"-"\u04f9",
         "\u0531"-"\u0556",
         "\u0559",
         "\u0561"-"\u0587",
         "\u05d0"-"\u05ea",
         "\u05f0"-"\u05f2",
         "\u0621"-"\u063a",
         "\u0640"-"\u064a",
         "\u0671"-"\u06d3",
         "\u06d5",
         "\u06e5"-"\u06e6",
         "\u06fa"-"\u06fc",
         "\u0710",
         "\u0712"-"\u072c",
         "\u0780"-"\u07a5",
         "\u0905"-"\u0939",
         "\u093d",
         "\u0950",
         "\u0958"-"\u0961",
         "\u0985"-"\u098c",
         "\u098f"-"\u0990",
         "\u0993"-"\u09a8",
         "\u09aa"-"\u09b0",
         "\u09b2",
         "\u09b6"-"\u09b9",
         "\u09dc"-"\u09dd",
         "\u09df"-"\u09e1",
         "\u09f0"-"\u09f3",
         "\u0a05"-"\u0a0a",
         "\u0a0f"-"\u0a10",
         "\u0a13"-"\u0a28",
         "\u0a2a"-"\u0a30",
         "\u0a32"-"\u0a33",
         "\u0a35"-"\u0a36",
         "\u0a38"-"\u0a39",
         "\u0a59"-"\u0a5c",
         "\u0a5e",
         "\u0a72"-"\u0a74",
         "\u0a85"-"\u0a8b",
         "\u0a8d",
         "\u0a8f"-"\u0a91",
         "\u0a93"-"\u0aa8",
         "\u0aaa"-"\u0ab0",
         "\u0ab2"-"\u0ab3",
         "\u0ab5"-"\u0ab9",
         "\u0abd",
         "\u0ad0",
         "\u0ae0",
         "\u0b05"-"\u0b0c",
         "\u0b0f"-"\u0b10",
         "\u0b13"-"\u0b28",
         "\u0b2a"-"\u0b30",
         "\u0b32"-"\u0b33",
         "\u0b36"-"\u0b39",
         "\u0b3d",
         "\u0b5c"-"\u0b5d",
         "\u0b5f"-"\u0b61",
         "\u0b85"-"\u0b8a",
         "\u0b8e"-"\u0b90",
         "\u0b92"-"\u0b95",
         "\u0b99"-"\u0b9a",
         "\u0b9c",
         "\u0b9e"-"\u0b9f",
         "\u0ba3"-"\u0ba4",
         "\u0ba8"-"\u0baa",
         "\u0bae"-"\u0bb5",
         "\u0bb7"-"\u0bb9",
         "\u0c05"-"\u0c0c",
         "\u0c0e"-"\u0c10",
         "\u0c12"-"\u0c28",
         "\u0c2a"-"\u0c33",
         "\u0c35"-"\u0c39",
         "\u0c60"-"\u0c61",
         "\u0c85"-"\u0c8c",
         "\u0c8e"-"\u0c90",
         "\u0c92"-"\u0ca8",
         "\u0caa"-"\u0cb3",
         "\u0cb5"-"\u0cb9",
         "\u0cde",
         "\u0ce0"-"\u0ce1",
         "\u0d05"-"\u0d0c",
         "\u0d0e"-"\u0d10",
         "\u0d12"-"\u0d28",
         "\u0d2a"-"\u0d39",
         "\u0d60"-"\u0d61",
         "\u0d85"-"\u0d96",
         "\u0d9a"-"\u0db1",
         "\u0db3"-"\u0dbb",
         "\u0dbd",
         "\u0dc0"-"\u0dc6",
         "\u0e01"-"\u0e30",
         "\u0e32"-"\u0e33",
         "\u0e3f"-"\u0e46",
         "\u0e81"-"\u0e82",
         "\u0e84",
         "\u0e87"-"\u0e88",
         "\u0e8a",
         "\u0e8d",
         "\u0e94"-"\u0e97",
         "\u0e99"-"\u0e9f",
         "\u0ea1"-"\u0ea3",
         "\u0ea5",
         "\u0ea7",
         "\u0eaa"-"\u0eab",
         "\u0ead"-"\u0eb0",
         "\u0eb2"-"\u0eb3",
         "\u0ebd",
         "\u0ec0"-"\u0ec4",
         "\u0ec6",
         "\u0edc"-"\u0edd",
         "\u0f00",
         "\u0f40"-"\u0f47",
         "\u0f49"-"\u0f6a",
         "\u0f88"-"\u0f8b",
         "\u1000"-"\u1021",
         "\u1023"-"\u1027",
         "\u1029"-"\u102a",
         "\u1050"-"\u1055",
         "\u10a0"-"\u10c5",
         "\u10d0"-"\u10f6",
         "\u1100"-"\u1159",
         "\u115f"-"\u11a2",
         "\u11a8"-"\u11f9",
         "\u1200"-"\u1206",
         "\u1208"-"\u1246",
         "\u1248",
         "\u124a"-"\u124d",
         "\u1250"-"\u1256",
         "\u1258",
         "\u125a"-"\u125d",
         "\u1260"-"\u1286",
         "\u1288",
         "\u128a"-"\u128d",
         "\u1290"-"\u12ae",
         "\u12b0",
         "\u12b2"-"\u12b5",
         "\u12b8"-"\u12be",
         "\u12c0",
         "\u12c2"-"\u12c5",
         "\u12c8"-"\u12ce",
         "\u12d0"-"\u12d6",
         "\u12d8"-"\u12ee",
         "\u12f0"-"\u130e",
         "\u1310",
         "\u1312"-"\u1315",
         "\u1318"-"\u131e",
         "\u1320"-"\u1346",
         "\u1348"-"\u135a",
         "\u13a0"-"\u13f4",
         "\u1401"-"\u166c",
         "\u166f"-"\u1676",
         "\u1681"-"\u169a",
         "\u16a0"-"\u16ea",
         "\u1780"-"\u17b3",
         "\u17db",
         "\u1820"-"\u1877",
         "\u1880"-"\u18a8",
         "\u1e00"-"\u1e9b",
         "\u1ea0"-"\u1ef9",
         "\u1f00"-"\u1f15",
         "\u1f18"-"\u1f1d",
         "\u1f20"-"\u1f45",
         "\u1f48"-"\u1f4d",
         "\u1f50"-"\u1f57",
         "\u1f59",
         "\u1f5b",
         "\u1f5d",
         "\u1f5f"-"\u1f7d",
         "\u1f80"-"\u1fb4",
         "\u1fb6"-"\u1fbc",
         "\u1fbe",
         "\u1fc2"-"\u1fc4",
         "\u1fc6"-"\u1fcc",
         "\u1fd0"-"\u1fd3",
         "\u1fd6"-"\u1fdb",
         "\u1fe0"-"\u1fec",
         "\u1ff2"-"\u1ff4",
         "\u1ff6"-"\u1ffc",
         "\u203f"-"\u2040",
         "\u207f",
         "\u20a0"-"\u20af",
         "\u2102",
         "\u2107",
         "\u210a"-"\u2113",
         "\u2115",
         "\u2119"-"\u211d",
         "\u2124",
         "\u2126",
         "\u2128",
         "\u212a"-"\u212d",
         "\u212f"-"\u2131",
         "\u2133"-"\u2139",
         "\u2160"-"\u2183",
         "\u3005"-"\u3007",
         "\u3021"-"\u3029",
         "\u3031"-"\u3035",
         "\u3038"-"\u303a",
         "\u3041"-"\u3094",
         "\u309d"-"\u309e",
         "\u30a1"-"\u30fe",
         "\u3105"-"\u312c",
         "\u3131"-"\u318e",
         "\u31a0"-"\u31b7",
         "\u3400"-"\u4db5",
         "\u4e00"-"\u9fa5",
         "\ua000"-"\ua48c",
         "\uac00"-"\ud7a3",
         "\uf900"-"\ufa2d",
         "\ufb00"-"\ufb06",
         "\ufb13"-"\ufb17",
         "\ufb1d",
         "\ufb1f"-"\ufb28",
         "\ufb2a"-"\ufb36",
         "\ufb38"-"\ufb3c",
         "\ufb3e",
         "\ufb40"-"\ufb41",
         "\ufb43"-"\ufb44",
         "\ufb46"-"\ufbb1",
         "\ufbd3"-"\ufd3d",
         "\ufd50"-"\ufd8f",
         "\ufd92"-"\ufdc7",
         "\ufdf0"-"\ufdfb",
         "\ufe33"-"\ufe34",
         "\ufe4d"-"\ufe4f",
         "\ufe69",
         "\ufe70"-"\ufe72",
         "\ufe74",
         "\ufe76"-"\ufefc",
         "\uff04",
         "\uff21"-"\uff3a",
         "\uff3f",
         "\uff41"-"\uff5a",
         "\uff65"-"\uffbe",
         "\uffc2"-"\uffc7",
         "\uffca"-"\uffcf",
         "\uffd2"-"\uffd7",
         "\uffda"-"\uffdc",
         "\uffe0"-"\uffe1",
         "\uffe5"-"\uffe6"
      ]
  >
|
  < #PART_LETTER:
      [  // all chars for which Character.isIdentifierPart is true
         "\u0000"-"\u0008",
         "\u000e"-"\u001b",
         "$",
         "0"-"9",
         "A"-"Z",
         "_",
         //"-",				// added in sasyLF
         "'",				// added in sasyLF
         "a"-"z",
         "\u007f"-"\u009f",
         "\u00a2"-"\u00a5",
         "\u00aa",
         "\u00b5",
         "\u00ba",
         "\u00c0"-"\u00d6",
         "\u00d8"-"\u00f6",
         "\u00f8"-"\u021f",
         "\u0222"-"\u0233",
         "\u0250"-"\u02ad",
         "\u02b0"-"\u02b8",
         "\u02bb"-"\u02c1",
         "\u02d0"-"\u02d1",
         "\u02e0"-"\u02e4",
         "\u02ee",
         "\u0300"-"\u034e",
         "\u0360"-"\u0362",
         "\u037a",
         "\u0386",
         "\u0388"-"\u038a",
         "\u038c",
         "\u038e"-"\u03a1",
         "\u03a3"-"\u03ce",
         "\u03d0"-"\u03d7",
         "\u03da"-"\u03f3",
         "\u0400"-"\u0481",
         "\u0483"-"\u0486",
         "\u048c"-"\u04c4",
         "\u04c7"-"\u04c8",
         "\u04cb"-"\u04cc",
         "\u04d0"-"\u04f5",
         "\u04f8"-"\u04f9",
         "\u0531"-"\u0556",
         "\u0559",
         "\u0561"-"\u0587",
         "\u0591"-"\u05a1",
         "\u05a3"-"\u05b9",
         "\u05bb"-"\u05bd",
         "\u05bf",
         "\u05c1"-"\u05c2",
         "\u05c4",
         "\u05d0"-"\u05ea",
         "\u05f0"-"\u05f2",
         "\u0621"-"\u063a",
         "\u0640"-"\u0655",
         "\u0660"-"\u0669",
         "\u0670"-"\u06d3",
         "\u06d5"-"\u06dc",
         "\u06df"-"\u06e8",
         "\u06ea"-"\u06ed",
         "\u06f0"-"\u06fc",
         "\u070f"-"\u072c",
         "\u0730"-"\u074a",
         "\u0780"-"\u07b0",
         "\u0901"-"\u0903",
         "\u0905"-"\u0939",
         "\u093c"-"\u094d",
         "\u0950"-"\u0954",
         "\u0958"-"\u0963",
         "\u0966"-"\u096f",
         "\u0981"-"\u0983",
         "\u0985"-"\u098c",
         "\u098f"-"\u0990",
         "\u0993"-"\u09a8",
         "\u09aa"-"\u09b0",
         "\u09b2",
         "\u09b6"-"\u09b9",
         "\u09bc",
         "\u09be"-"\u09c4",
         "\u09c7"-"\u09c8",
         "\u09cb"-"\u09cd",
         "\u09d7",
         "\u09dc"-"\u09dd",
         "\u09df"-"\u09e3",
         "\u09e6"-"\u09f3",
         "\u0a02",
         "\u0a05"-"\u0a0a",
         "\u0a0f"-"\u0a10",
         "\u0a13"-"\u0a28",
         "\u0a2a"-"\u0a30",
         "\u0a32"-"\u0a33",
         "\u0a35"-"\u0a36",
         "\u0a38"-"\u0a39",
         "\u0a3c",
         "\u0a3e"-"\u0a42",
         "\u0a47"-"\u0a48",
         "\u0a4b"-"\u0a4d",
         "\u0a59"-"\u0a5c",
         "\u0a5e",
         "\u0a66"-"\u0a74",
         "\u0a81"-"\u0a83",
         "\u0a85"-"\u0a8b",
         "\u0a8d",
         "\u0a8f"-"\u0a91",
         "\u0a93"-"\u0aa8",
         "\u0aaa"-"\u0ab0",
         "\u0ab2"-"\u0ab3",
         "\u0ab5"-"\u0ab9",
         "\u0abc"-"\u0ac5",
         "\u0ac7"-"\u0ac9",
         "\u0acb"-"\u0acd",
         "\u0ad0",
         "\u0ae0",
         "\u0ae6"-"\u0aef",
         "\u0b01"-"\u0b03",
         "\u0b05"-"\u0b0c",
         "\u0b0f"-"\u0b10",
         "\u0b13"-"\u0b28",
         "\u0b2a"-"\u0b30",
         "\u0b32"-"\u0b33",
         "\u0b36"-"\u0b39",
         "\u0b3c"-"\u0b43",
         "\u0b47"-"\u0b48",
         "\u0b4b"-"\u0b4d",
         "\u0b56"-"\u0b57",
         "\u0b5c"-"\u0b5d",
         "\u0b5f"-"\u0b61",
         "\u0b66"-"\u0b6f",
         "\u0b82"-"\u0b83",
         "\u0b85"-"\u0b8a",
         "\u0b8e"-"\u0b90",
         "\u0b92"-"\u0b95",
         "\u0b99"-"\u0b9a",
         "\u0b9c",
         "\u0b9e"-"\u0b9f",
         "\u0ba3"-"\u0ba4",
         "\u0ba8"-"\u0baa",
         "\u0bae"-"\u0bb5",
         "\u0bb7"-"\u0bb9",
         "\u0bbe"-"\u0bc2",
         "\u0bc6"-"\u0bc8",
         "\u0bca"-"\u0bcd",
         "\u0bd7",
         "\u0be7"-"\u0bef",
         "\u0c01"-"\u0c03",
         "\u0c05"-"\u0c0c",
         "\u0c0e"-"\u0c10",
         "\u0c12"-"\u0c28",
         "\u0c2a"-"\u0c33",
         "\u0c35"-"\u0c39",
         "\u0c3e"-"\u0c44",
         "\u0c46"-"\u0c48",
         "\u0c4a"-"\u0c4d",
         "\u0c55"-"\u0c56",
         "\u0c60"-"\u0c61",
         "\u0c66"-"\u0c6f",
         "\u0c82"-"\u0c83",
         "\u0c85"-"\u0c8c",
         "\u0c8e"-"\u0c90",
         "\u0c92"-"\u0ca8",
         "\u0caa"-"\u0cb3",
         "\u0cb5"-"\u0cb9",
         "\u0cbe"-"\u0cc4",
         "\u0cc6"-"\u0cc8",
         "\u0cca"-"\u0ccd",
         "\u0cd5"-"\u0cd6",
         "\u0cde",
         "\u0ce0"-"\u0ce1",
         "\u0ce6"-"\u0cef",
         "\u0d02"-"\u0d03",
         "\u0d05"-"\u0d0c",
         "\u0d0e"-"\u0d10",
         "\u0d12"-"\u0d28",
         "\u0d2a"-"\u0d39",
         "\u0d3e"-"\u0d43",
         "\u0d46"-"\u0d48",
         "\u0d4a"-"\u0d4d",
         "\u0d57",
         "\u0d60"-"\u0d61",
         "\u0d66"-"\u0d6f",
         "\u0d82"-"\u0d83",
         "\u0d85"-"\u0d96",
         "\u0d9a"-"\u0db1",
         "\u0db3"-"\u0dbb",
         "\u0dbd",
         "\u0dc0"-"\u0dc6",
         "\u0dca",
         "\u0dcf"-"\u0dd4",
         "\u0dd6",
         "\u0dd8"-"\u0ddf",
         "\u0df2"-"\u0df3",
         "\u0e01"-"\u0e3a",
         "\u0e3f"-"\u0e4e",
         "\u0e50"-"\u0e59",
         "\u0e81"-"\u0e82",
         "\u0e84",
         "\u0e87"-"\u0e88",
         "\u0e8a",
         "\u0e8d",
         "\u0e94"-"\u0e97",
         "\u0e99"-"\u0e9f",
         "\u0ea1"-"\u0ea3",
         "\u0ea5",
         "\u0ea7",
         "\u0eaa"-"\u0eab",
         "\u0ead"-"\u0eb9",
         "\u0ebb"-"\u0ebd",
         "\u0ec0"-"\u0ec4",
         "\u0ec6",
         "\u0ec8"-"\u0ecd",
         "\u0ed0"-"\u0ed9",
         "\u0edc"-"\u0edd",
         "\u0f00",
         "\u0f18"-"\u0f19",
         "\u0f20"-"\u0f29",
         "\u0f35",
         "\u0f37",
         "\u0f39",
         "\u0f3e"-"\u0f47",
         "\u0f49"-"\u0f6a",
         "\u0f71"-"\u0f84",
         "\u0f86"-"\u0f8b",
         "\u0f90"-"\u0f97",
         "\u0f99"-"\u0fbc",
         "\u0fc6",
         "\u1000"-"\u1021",
         "\u1023"-"\u1027",
         "\u1029"-"\u102a",
         "\u102c"-"\u1032",
         "\u1036"-"\u1039",
         "\u1040"-"\u1049",
         "\u1050"-"\u1059",
         "\u10a0"-"\u10c5",
         "\u10d0"-"\u10f6",
         "\u1100"-"\u1159",
         "\u115f"-"\u11a2",
         "\u11a8"-"\u11f9",
         "\u1200"-"\u1206",
         "\u1208"-"\u1246",
         "\u1248",
         "\u124a"-"\u124d",
         "\u1250"-"\u1256",
         "\u1258",
         "\u125a"-"\u125d",
         "\u1260"-"\u1286",
         "\u1288",
         "\u128a"-"\u128d",
         "\u1290"-"\u12ae",
         "\u12b0",
         "\u12b2"-"\u12b5",
         "\u12b8"-"\u12be",
         "\u12c0",
         "\u12c2"-"\u12c5",
         "\u12c8"-"\u12ce",
         "\u12d0"-"\u12d6",
         "\u12d8"-"\u12ee",
         "\u12f0"-"\u130e",
         "\u1310",
         "\u1312"-"\u1315",
         "\u1318"-"\u131e",
         "\u1320"-"\u1346",
         "\u1348"-"\u135a",
         "\u1369"-"\u1371",
         "\u13a0"-"\u13f4",
         "\u1401"-"\u166c",
         "\u166f"-"\u1676",
         "\u1681"-"\u169a",
         "\u16a0"-"\u16ea",
         "\u1780"-"\u17d3",
         "\u17db",
         "\u17e0"-"\u17e9",
         "\u180b"-"\u180e",
         "\u1810"-"\u1819",
         "\u1820"-"\u1877",
         "\u1880"-"\u18a9",
         "\u1e00"-"\u1e9b",
         "\u1ea0"-"\u1ef9",
         "\u1f00"-"\u1f15",
         "\u1f18"-"\u1f1d",
         "\u1f20"-"\u1f45",
         "\u1f48"-"\u1f4d",
         "\u1f50"-"\u1f57",
         "\u1f59",
         "\u1f5b",
         "\u1f5d",
         "\u1f5f"-"\u1f7d",
         "\u1f80"-"\u1fb4",
         "\u1fb6"-"\u1fbc",
         "\u1fbe",
         "\u1fc2"-"\u1fc4",
         "\u1fc6"-"\u1fcc",
         "\u1fd0"-"\u1fd3",
         "\u1fd6"-"\u1fdb",
         "\u1fe0"-"\u1fec",
         "\u1ff2"-"\u1ff4",
         "\u1ff6"-"\u1ffc",
         "\u200c"-"\u200f",
         "\u202a"-"\u202e",
         "\u203f"-"\u2040",
         "\u206a"-"\u206f",
         "\u207f",
         "\u20a0"-"\u20af",
         "\u20d0"-"\u20dc",
         "\u20e1",
         "\u2102",
         "\u2107",
         "\u210a"-"\u2113",
         "\u2115",
         "\u2119"-"\u211d",
         "\u2124",
         "\u2126",
         "\u2128",
         "\u212a"-"\u212d",
         "\u212f"-"\u2131",
         "\u2133"-"\u2139",
         "\u2160"-"\u2183",
         "\u3005"-"\u3007",
         "\u3021"-"\u302f",
         "\u3031"-"\u3035",
         "\u3038"-"\u303a",
         "\u3041"-"\u3094",
         "\u3099"-"\u309a",
         "\u309d"-"\u309e",
         "\u30a1"-"\u30fe",
         "\u3105"-"\u312c",
         "\u3131"-"\u318e",
         "\u31a0"-"\u31b7",
         "\u3400"-"\u4db5",
         "\u4e00"-"\u9fa5",
         "\ua000"-"\ua48c",
         "\uac00"-"\ud7a3",
         "\uf900"-"\ufa2d",
         "\ufb00"-"\ufb06",
         "\ufb13"-"\ufb17",
         "\ufb1d"-"\ufb28",
         "\ufb2a"-"\ufb36",
         "\ufb38"-"\ufb3c",
         "\ufb3e",
         "\ufb40"-"\ufb41",
         "\ufb43"-"\ufb44",
         "\ufb46"-"\ufbb1",
         "\ufbd3"-"\ufd3d",
         "\ufd50"-"\ufd8f",
         "\ufd92"-"\ufdc7",
         "\ufdf0"-"\ufdfb",
         "\ufe20"-"\ufe23",
         "\ufe33"-"\ufe34",
         "\ufe4d"-"\ufe4f",
         "\ufe69",
         "\ufe70"-"\ufe72",
         "\ufe74",
         "\ufe76"-"\ufefc",
         "\ufeff",
         "\uff04",
         "\uff10"-"\uff19",
         "\uff21"-"\uff3a",
         "\uff3f",
         "\uff41"-"\uff5a",
         "\uff65"-"\uffbe",
         "\uffc2"-"\uffc7",
         "\uffca"-"\uffcf",
         "\uffd2"-"\uffd7",
         "\uffda"-"\uffdc",
         "\uffe0"-"\uffe1",
         "\uffe5"-"\uffe6",
         "\ufff9"-"\ufffb"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACK: "[" >
| < RBRACK: "]" >
| < SEMICOLON: ";" >
| < MINUS: "-" >
| < COMMA: "," >
//| < DOUBLECOLON: "::" >
| < COLON: ":" >
| < DOT: "." >
| < ASSIGN: "::=" >
| < OR: "|" >
}


/* USER-DEFINED OPERATORS */

TOKEN :
{
  < OPERATOR:
      [  
         "~",
         "!",
         "@",
         "#",
         "$",
         "%",
         "^",
         "&",
         "*",
         "+",
         "=",
         "{",
         "}",
         "|",
         "<",
         ">",
         "?",
         "\\",
	 	 "/"
      ] | "|-" |
      ~ [ "\u0000"-"\u007f",
         "\u0080"-"\u009f",
         "\u00a2"-"\u00a5",
         "\u00aa",
         "\u00b5",
         "\u00ba",
         "\u00c0"-"\u00d6",
         "\u00d8"-"\u00f6",
         "\u00f8"-"\u021f",
         "\u0222"-"\u0233",
         "\u0250"-"\u02ad",
         "\u02b0"-"\u02b8",
         "\u02bb"-"\u02c1",
         "\u02d0"-"\u02d1",
         "\u02e0"-"\u02e4",
         "\u02ee",
         "\u0300"-"\u034e",
         "\u0360"-"\u0362",
         "\u037a",
         "\u0386",
         "\u0388"-"\u038a",
         "\u038c",
         "\u038e"-"\u03a1",
         "\u03a3"-"\u03ce",
         "\u03d0"-"\u03d7",
         "\u03da"-"\u03f3",
         "\u0400"-"\u0481",
         "\u0483"-"\u0486",
         "\u048c"-"\u04c4",
         "\u04c7"-"\u04c8",
         "\u04cb"-"\u04cc",
         "\u04d0"-"\u04f5",
         "\u04f8"-"\u04f9",
         "\u0531"-"\u0556",
         "\u0559",
         "\u0561"-"\u0587",
         "\u0591"-"\u05a1",
         "\u05a3"-"\u05b9",
         "\u05bb"-"\u05bd",
         "\u05bf",
         "\u05c1"-"\u05c2",
         "\u05c4",
         "\u05d0"-"\u05ea",
         "\u05f0"-"\u05f2",
         "\u0621"-"\u063a",
         "\u0640"-"\u0655",
         "\u0660"-"\u0669",
         "\u0670"-"\u06d3",
         "\u06d5"-"\u06dc",
         "\u06df"-"\u06e8",
         "\u06ea"-"\u06ed",
         "\u06f0"-"\u06fc",
         "\u070f"-"\u072c",
         "\u0730"-"\u074a",
         "\u0780"-"\u07b0",
         "\u0901"-"\u0903",
         "\u0905"-"\u0939",
         "\u093c"-"\u094d",
         "\u0950"-"\u0954",
         "\u0958"-"\u0963",
         "\u0966"-"\u096f",
         "\u0981"-"\u0983",
         "\u0985"-"\u098c",
         "\u098f"-"\u0990",
         "\u0993"-"\u09a8",
         "\u09aa"-"\u09b0",
         "\u09b2",
         "\u09b6"-"\u09b9",
         "\u09bc",
         "\u09be"-"\u09c4",
         "\u09c7"-"\u09c8",
         "\u09cb"-"\u09cd",
         "\u09d7",
         "\u09dc"-"\u09dd",
         "\u09df"-"\u09e3",
         "\u09e6"-"\u09f3",
         "\u0a02",
         "\u0a05"-"\u0a0a",
         "\u0a0f"-"\u0a10",
         "\u0a13"-"\u0a28",
         "\u0a2a"-"\u0a30",
         "\u0a32"-"\u0a33",
         "\u0a35"-"\u0a36",
         "\u0a38"-"\u0a39",
         "\u0a3c",
         "\u0a3e"-"\u0a42",
         "\u0a47"-"\u0a48",
         "\u0a4b"-"\u0a4d",
         "\u0a59"-"\u0a5c",
         "\u0a5e",
         "\u0a66"-"\u0a74",
         "\u0a81"-"\u0a83",
         "\u0a85"-"\u0a8b",
         "\u0a8d",
         "\u0a8f"-"\u0a91",
         "\u0a93"-"\u0aa8",
         "\u0aaa"-"\u0ab0",
         "\u0ab2"-"\u0ab3",
         "\u0ab5"-"\u0ab9",
         "\u0abc"-"\u0ac5",
         "\u0ac7"-"\u0ac9",
         "\u0acb"-"\u0acd",
         "\u0ad0",
         "\u0ae0",
         "\u0ae6"-"\u0aef",
         "\u0b01"-"\u0b03",
         "\u0b05"-"\u0b0c",
         "\u0b0f"-"\u0b10",
         "\u0b13"-"\u0b28",
         "\u0b2a"-"\u0b30",
         "\u0b32"-"\u0b33",
         "\u0b36"-"\u0b39",
         "\u0b3c"-"\u0b43",
         "\u0b47"-"\u0b48",
         "\u0b4b"-"\u0b4d",
         "\u0b56"-"\u0b57",
         "\u0b5c"-"\u0b5d",
         "\u0b5f"-"\u0b61",
         "\u0b66"-"\u0b6f",
         "\u0b82"-"\u0b83",
         "\u0b85"-"\u0b8a",
         "\u0b8e"-"\u0b90",
         "\u0b92"-"\u0b95",
         "\u0b99"-"\u0b9a",
         "\u0b9c",
         "\u0b9e"-"\u0b9f",
         "\u0ba3"-"\u0ba4",
         "\u0ba8"-"\u0baa",
         "\u0bae"-"\u0bb5",
         "\u0bb7"-"\u0bb9",
         "\u0bbe"-"\u0bc2",
         "\u0bc6"-"\u0bc8",
         "\u0bca"-"\u0bcd",
         "\u0bd7",
         "\u0be7"-"\u0bef",
         "\u0c01"-"\u0c03",
         "\u0c05"-"\u0c0c",
         "\u0c0e"-"\u0c10",
         "\u0c12"-"\u0c28",
         "\u0c2a"-"\u0c33",
         "\u0c35"-"\u0c39",
         "\u0c3e"-"\u0c44",
         "\u0c46"-"\u0c48",
         "\u0c4a"-"\u0c4d",
         "\u0c55"-"\u0c56",
         "\u0c60"-"\u0c61",
         "\u0c66"-"\u0c6f",
         "\u0c82"-"\u0c83",
         "\u0c85"-"\u0c8c",
         "\u0c8e"-"\u0c90",
         "\u0c92"-"\u0ca8",
         "\u0caa"-"\u0cb3",
         "\u0cb5"-"\u0cb9",
         "\u0cbe"-"\u0cc4",
         "\u0cc6"-"\u0cc8",
         "\u0cca"-"\u0ccd",
         "\u0cd5"-"\u0cd6",
         "\u0cde",
         "\u0ce0"-"\u0ce1",
         "\u0ce6"-"\u0cef",
         "\u0d02"-"\u0d03",
         "\u0d05"-"\u0d0c",
         "\u0d0e"-"\u0d10",
         "\u0d12"-"\u0d28",
         "\u0d2a"-"\u0d39",
         "\u0d3e"-"\u0d43",
         "\u0d46"-"\u0d48",
         "\u0d4a"-"\u0d4d",
         "\u0d57",
         "\u0d60"-"\u0d61",
         "\u0d66"-"\u0d6f",
         "\u0d82"-"\u0d83",
         "\u0d85"-"\u0d96",
         "\u0d9a"-"\u0db1",
         "\u0db3"-"\u0dbb",
         "\u0dbd",
         "\u0dc0"-"\u0dc6",
         "\u0dca",
         "\u0dcf"-"\u0dd4",
         "\u0dd6",
         "\u0dd8"-"\u0ddf",
         "\u0df2"-"\u0df3",
         "\u0e01"-"\u0e3a",
         "\u0e3f"-"\u0e4e",
         "\u0e50"-"\u0e59",
         "\u0e81"-"\u0e82",
         "\u0e84",
         "\u0e87"-"\u0e88",
         "\u0e8a",
         "\u0e8d",
         "\u0e94"-"\u0e97",
         "\u0e99"-"\u0e9f",
         "\u0ea1"-"\u0ea3",
         "\u0ea5",
         "\u0ea7",
         "\u0eaa"-"\u0eab",
         "\u0ead"-"\u0eb9",
         "\u0ebb"-"\u0ebd",
         "\u0ec0"-"\u0ec4",
         "\u0ec6",
         "\u0ec8"-"\u0ecd",
         "\u0ed0"-"\u0ed9",
         "\u0edc"-"\u0edd",
         "\u0f00",
         "\u0f18"-"\u0f19",
         "\u0f20"-"\u0f29",
         "\u0f35",
         "\u0f37",
         "\u0f39",
         "\u0f3e"-"\u0f47",
         "\u0f49"-"\u0f6a",
         "\u0f71"-"\u0f84",
         "\u0f86"-"\u0f8b",
         "\u0f90"-"\u0f97",
         "\u0f99"-"\u0fbc",
         "\u0fc6",
         "\u1000"-"\u1021",
         "\u1023"-"\u1027",
         "\u1029"-"\u102a",
         "\u102c"-"\u1032",
         "\u1036"-"\u1039",
         "\u1040"-"\u1049",
         "\u1050"-"\u1059",
         "\u10a0"-"\u10c5",
         "\u10d0"-"\u10f6",
         "\u1100"-"\u1159",
         "\u115f"-"\u11a2",
         "\u11a8"-"\u11f9",
         "\u1200"-"\u1206",
         "\u1208"-"\u1246",
         "\u1248",
         "\u124a"-"\u124d",
         "\u1250"-"\u1256",
         "\u1258",
         "\u125a"-"\u125d",
         "\u1260"-"\u1286",
         "\u1288",
         "\u128a"-"\u128d",
         "\u1290"-"\u12ae",
         "\u12b0",
         "\u12b2"-"\u12b5",
         "\u12b8"-"\u12be",
         "\u12c0",
         "\u12c2"-"\u12c5",
         "\u12c8"-"\u12ce",
         "\u12d0"-"\u12d6",
         "\u12d8"-"\u12ee",
         "\u12f0"-"\u130e",
         "\u1310",
         "\u1312"-"\u1315",
         "\u1318"-"\u131e",
         "\u1320"-"\u1346",
         "\u1348"-"\u135a",
         "\u1369"-"\u1371",
         "\u13a0"-"\u13f4",
         "\u1401"-"\u166c",
         "\u166f"-"\u1676",
         "\u1681"-"\u169a",
         "\u16a0"-"\u16ea",
         "\u1780"-"\u17d3",
         "\u17db",
         "\u17e0"-"\u17e9",
         "\u180b"-"\u180e",
         "\u1810"-"\u1819",
         "\u1820"-"\u1877",
         "\u1880"-"\u18a9",
         "\u1e00"-"\u1e9b",
         "\u1ea0"-"\u1ef9",
         "\u1f00"-"\u1f15",
         "\u1f18"-"\u1f1d",
         "\u1f20"-"\u1f45",
         "\u1f48"-"\u1f4d",
         "\u1f50"-"\u1f57",
         "\u1f59",
         "\u1f5b",
         "\u1f5d",
         "\u1f5f"-"\u1f7d",
         "\u1f80"-"\u1fb4",
         "\u1fb6"-"\u1fbc",
         "\u1fbe",
         "\u1fc2"-"\u1fc4",
         "\u1fc6"-"\u1fcc",
         "\u1fd0"-"\u1fd3",
         "\u1fd6"-"\u1fdb",
         "\u1fe0"-"\u1fec",
         "\u1ff2"-"\u1ff4",
         "\u1ff6"-"\u1ffc",
         "\u200c"-"\u200f",
         "\u202a"-"\u202e",
         "\u203f"-"\u2040",
         "\u206a"-"\u206f",
         "\u207f",
         "\u20a0"-"\u20af",
         "\u20d0"-"\u20dc",
         "\u20e1",
         "\u2102",
         "\u2107",
         "\u210a"-"\u2113",
         "\u2115",
         "\u2119"-"\u211d",
         "\u2124",
         "\u2126",
         "\u2128",
         "\u212a"-"\u212d",
         "\u212f"-"\u2131",
         "\u2133"-"\u2139",
         "\u2160"-"\u2183",
         "\u3005"-"\u3007",
         "\u3021"-"\u302f",
         "\u3031"-"\u3035",
         "\u3038"-"\u303a",
         "\u3041"-"\u3094",
         "\u3099"-"\u309a",
         "\u309d"-"\u309e",
         "\u30a1"-"\u30fe",
         "\u3105"-"\u312c",
         "\u3131"-"\u318e",
         "\u31a0"-"\u31b7",
         "\u3400"-"\u4db5",
         "\u4e00"-"\u9fa5",
         "\ua000"-"\ua48c",
         "\uac00"-"\ud7a3",
         "\uf900"-"\ufa2d",
         "\ufb00"-"\ufb06",
         "\ufb13"-"\ufb17",
         "\ufb1d"-"\ufb28",
         "\ufb2a"-"\ufb36",
         "\ufb38"-"\ufb3c",
         "\ufb3e",
         "\ufb40"-"\ufb41",
         "\ufb43"-"\ufb44",
         "\ufb46"-"\ufbb1",
         "\ufbd3"-"\ufd3d",
         "\ufd50"-"\ufd8f",
         "\ufd92"-"\ufdc7",
         "\ufdf0"-"\ufdfb",
         "\ufe20"-"\ufe23",
         "\ufe33"-"\ufe34",
         "\ufe4d"-"\ufe4f",
         "\ufe69",
         "\ufe70"-"\ufe72",
         "\ufe74",
         "\ufe76"-"\ufefc",
         "\ufeff",
         "\uff04",
         "\uff10"-"\uff19",
         "\uff21"-"\uff3a",
         "\uff3f",
         "\uff41"-"\uff5a",
         "\uff65"-"\uffbe",
         "\uffc2"-"\uffc7",
         "\uffca"-"\uffcf",
         "\uffd2"-"\uffd7",
         "\uffda"-"\uffdc",
         "\uffe0"-"\uffe1",
         "\uffe5"-"\uffe6",
         "\ufff9"-"\ufffb"      
      ]
  >
}



/************************************
 * THE LANGUAGE GRAMMAR STARTS HERE *
 ************************************/

/*
 * Program structuring syntax follows.
 */

CompUnit CompilationUnit() :
{ List<String> pkg = null; List<Syntax> syntax = null; Judgment j;
  Set<String> terms = new HashSet<String>();
  List<Judgment> judges = new ArrayList<Judgment>();
  Theorem thm, lastThm;
  Token andTok = null;
  List<Theorem> theorems = new ArrayList<Theorem>(); }
{
  [ pkg=PackageDeclaration() ]
  [ terms=TerminalsDeclaration() ]
  [ syntax=SyntaxDeclaration() ]
  ( j=JudgmentDeclaration() { judges.add(j); } )*
  
  (
    thm = TheoremDeclaration() { theorems.add(thm); lastThm = thm; }
    (
      (andTok = "and" )? 
      thm = TheoremDeclaration()
        { theorems.add(thm);
          if (andTok != null)
            lastThm.setAnd(thm);
          andTok = null;
          lastThm = thm;
        }
    )*
  )?
  <EOF>
  {
    if (pkg == null)
		pkg = new ArrayList<String>();
    if (syntax == null)
		syntax = new ArrayList<Syntax>();
    return new CompUnit(pkg, terms, syntax, judges, theorems);
  }
}

List<String> PackageDeclaration() :
{ List<String> l; }
{
  "package" l=Name() <SEMICOLON> { return l; }
}

Token Operator() :
{ Token t; }
{
	(
		t=<OPERATOR>
		| t=<COLON>
		| t=<SEMICOLON>
		| t=<MINUS>
		| t=<COMMA>
		| t=<OR>
		/* | t=<DOT> */
	) { return t; }
}

Token Keyword() :
{ Token t; }
{   (		t=< AND >
    |   t=< CASE >
    |  	t=< END >
  ) { return t; }}
 
List<String> Name() :
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
{Token t; List<String> l = new ArrayList<String>(); }
{
  t=<IDENTIFIER> { l.add(t.image); }
  ( LOOKAHEAD(2) "." t=<IDENTIFIER> { l.add(t.image); }
  )*
  { return l; }
}

String RuleName() :
{Token t, t1; String s; }
{
  t1=<IDENTIFIER> { s = t1.image; }
  ( LOOKAHEAD({ isRulePart() }) <MINUS> (t=<IDENTIFIER> | t=<INTEGER_LITERAL>) { s += "-" + t.image; }
  )*
  { if (!(notNL(t1.specialToken)))
  		ErrorHandler.report("Missing a rule name (must be on the same line as the ---)", new Location(t1));
  	return s; }
}

List<Syntax> SyntaxDeclaration() :
{ 	Syntax s;
	List<Syntax> l = new ArrayList<Syntax>(); }
{
  "syntax"
  ( s=BNFRule() { l.add(s); } )+
  { return l; }
}

Token ExtendedIdentifier() :
{ Token t; }
{
	(t=<IDENTIFIER> | t=<AND>) { return t; }
} 

Set<String> TerminalsDeclaration() :
{Token t; Set<String> l = new HashSet<String>(); }
{
  "terminals"
  (t=ExtendedIdentifier() { debug2(t.image); l.add(t.image); addTerminal(t); } )+
  { return l; }
}

Syntax BNFRule() :
{Token t; List<Clause> l = new ArrayList<Clause>();}
{
  t=<IDENTIFIER> <ASSIGN> Clauses(l)
  {
    NonTerminal nt = getNonTerminal(t);
    return new Syntax(nt, l);
  }
}

void Clauses(List<Clause> l) :
{Clause c;}
{
  c=Clause() { if (c == null) System.err.println("empty c"); l.add(c); }
  [ "|" Clauses(l) ]
}

Clause Clause() :
{Element e; Clause c = null; }
{
  ( LOOKAHEAD({ isTermNoBAR() }) e=Term()
    {
		if (c == null)
			c = new Clause(e);
		c.getElements().add(e);
    }
  )+
  { return c; }
}

Element Term() :
{ Token t; Element e; }
{
  LOOKAHEAD({ isBinding() }) e=Binding() { return e; }
  | t=<IDENTIFIER> { return getElement(t); }
  | t=<STRING_LITERAL> { return addTerminal(t, t.image.substring(1, t.image.length()-1)); }
  | t=Operator() { return addTerminal(t, t.image); }
  | t=Keyword() { return addTerminal(t, t.image); }
  | t=<INTEGER_LITERAL> { return addTerminal(t, t.image); }
}

Binding Binding() :
{ Token t; Element e; List<Element> l = new ArrayList<Element>(); }
{
  t=<IDENTIFIER> "["
  	(LOOKAHEAD({ isVarBindingArg() }) e=Term()
  	 | e=Expr())
  	"]" { l.add(e); }
  ( "[" e=Term() { l.add(e); } "]" )*
  { return new Binding(new Location(t), getNonTerminal(t), l); }
}

Judgment JudgmentDeclaration() :
{ Token t,t_assume=null; String s; Clause c; Rule r; List<Rule> rules = new ArrayList<Rule>(); }
{
  t=<JUDGMENT> s=RuleName() <COLON>
  c=ExprToNL()
  [ <ASSUMES> t_assume=<IDENTIFIER> ]
  ( r=RuleDeclaration() { rules.add(r); } )*
  { return new Judgment(new Location(t), s, rules, c, t_assume==null ? null : getNonTerminal(t_assume)); }
}

Rule RuleDeclaration() :
{ Token t; String n; Clause c; List<Clause> premises = new ArrayList<Clause>(); }
{
  ( [<PREMISE>] c=ExprToNL() { premises.add(c); } )*
  t=<BAR> n=RuleName() 
  c=ExprToNL() { return new Rule(new Location(t), n, premises, c); }
}

Clause ExprToNL() :
{ Element e; Clause c = null; }
{
  ( <LPAREN> e=Expr() <RPAREN>
	{
		c = new Clause(e);
		c.getElements().add(e);
	}
    | e=Term()
	{
		c = new Clause(e);
		c.getElements().add(e);
	}
  )
  (
    LOOKAHEAD({ isTermNoNL() }) e=Term()
	{
		c.getElements().add(e);
	}
    | LOOKAHEAD({ lParenNoNL() })
    <LPAREN> e=Expr() <RPAREN>
	{
		c.getElements().add(e);
	}
  )*
  { return c; }
}

Clause Expr() :
{ Element e; Clause c = null; }
{
  (
    LOOKAHEAD({ isTerm() }) e=Term()
	{
		if (c == null)
			c = new Clause(e);
		c.getElements().add(e);
	}
    | <LPAREN> e=Expr() <RPAREN>
	{
		if (c == null)
			c = new Clause(e);
		c.getElements().add(e);
	}
  )+
  { return c; }
}

Clause SimpleExpr() :
{ Element e; Clause c = null, a; Token t; }
{
  (
    LOOKAHEAD(<IDENTIFIER>) e=Term()
	{
		c = new Clause(e);
		c.getElements().add(e);
	}
    | <LPAREN> e=Expr()
      [ t=<ASSUMES> a=Expr() { e = new AssumptionElement(new Location(t), e, a); } ]
      <RPAREN>
	{
		c = new Clause(e);
		c.getElements().add(e);
	}
  )
  { return c; }
}

Theorem TheoremDeclaration() :
{ Token t; String s; Clause c; Clause a = null; Binding b; Theorem thm; Derivation d; }
{
  (t=<THEOREM> | t=<LEMMA>) s=RuleName() <COLON> { thm = new Theorem(s, new Location(t)); }
  [ <ASSUMES> t=<IDENTIFIER> { thm.setAssumes(getNonTerminal(t)); } ]
  ( LOOKAHEAD(3) <FORALL> t=<IDENTIFIER> <COLON> c=Expr()
    { thm.getForalls().add(new DerivationByAssumption(t.image, new Location(t), c)); }
  | LOOKAHEAD(3) <FORALL> b=Binding() [ <ASSUMES> a=Expr() ]
    { thm.getForalls().add(new BindingAssumption(b, a)); a = null; }
  | <FORALL> t=<IDENTIFIER> [ <ASSUMES> a=Expr() ]
    { thm.getForalls().add(new SyntaxAssumption(t.image, new Location(t), true, a)); a = null; }
  )*
  <EXISTS> c=Expr() (t=<AND> a=Expr() { AndJudgment.addAnd(c,new Location(t),a); a = null; } )*
  "." { thm.setExists(c); }
  ( d=Derivation() { thm.getDerivations().add(d); } )*
  <END> (<THEOREM> | <LEMMA>)
  { return thm; }
}

Derivation Derivation() :
{ Token t; Token t2; Token a; String s; Clause c; Clause c2; Derivation d; }
{
   (     t=<IDENTIFIER> <COLON> c=Expr()
   (a=<AND> t2=<IDENTIFIER> <COLON> c2=Expr()
     { t.image = t.image+","+t2.image;
       AndJudgment.addAnd(c,new Location(a),c2); })*
     |
     t=<PROOF> { c = null; })
   <BY> d=Justification(t, c)
  { return d; }
}

Derivation Justification(Token startT, Clause c) :
{ Token t; DerivationWithArgs d; DerivationByInduction di; Case ca;
  DerivationByCaseAnalysis dca; String s; Element e; Clause cl; Token of;
}
{ // args should include expressions
  (<RULE> | <THEOREM> | <LEMMA>) s=RuleName() { d=new DerivationByRule(startT.image, new Location(startT), c, s); }
    [ <ON> cl=SimpleExpr() { d.getArgStrings().add(cl); }
      ( <COMMA> cl=SimpleExpr() { d.getArgStrings().add(cl); } )* 
    ]
    { return d; }
  | LOOKAHEAD(2) <INDUCTION> <ON> t=<IDENTIFIER> <COLON>
    { di = new DerivationByInduction(startT.image, new Location(startT), c, t.image); }
    ( ca=Case() { di.getCases().add(ca); })+
    <END> <INDUCTION>
    { return di; }
  | <CASE> <ANALYSIS> <ON> t=<IDENTIFIER> <COLON>
    { dca = new DerivationByCaseAnalysis(startT.image, new Location(startT), c, t.image); }
    ( ca=Case() { dca.getCases().add(ca); })*
    <END> <CASE> <ANALYSIS>
    { return dca; }
  | <INVERSION> of=<IDENTIFIER> s=RuleName() <ON> t=<IDENTIFIER>
    {
      if (!of.image.equals("of")) throw new ParseException("expected 'inversion of', not 'inversion " + of.image + "'");
   	  d = new DerivationByInversion(startT.image, new Location(startT), c, s, t.image);
    }
    { return d; }
    // args should include expressions *****
  | <INDUCTION> <HYPOTHESIS> <ON> cl=SimpleExpr() //t=<IDENTIFIER>
    { d = new DerivationByInductionHypothesis(startT.image, new Location(startT), c);
      d.getArgStrings().add(cl);    }
    ( <COMMA> cl=SimpleExpr() { d.getArgStrings().add(cl); } )*
    { return d; }
  | <SUBSTITUTION> <ON> t=<IDENTIFIER>
    { 
      d = new DerivationBySubstitution(startT.image, new Location(startT), c);
      d.getArgStrings().add(clauseFor(t));
    }
    ( <COMMA> t=<IDENTIFIER> { d.getArgStrings().add(clauseFor(t)); } )* 
    { return d; }
  | t=<UNPROVED>
    { d = new DerivationUnproved(startT.image, new Location(startT), c);
      return d; }
  | t=<SOLVE>
    { d = new DerivationBySolve(startT.image, new Location(startT), c);
      return d; }
  | <EXCHANGE> <ON> t=<IDENTIFIER>
    { d = new DerivationByExchange(startT.image, new Location(startT), c);
      d.getArgStrings().add(clauseFor(t));
      return d; }
  | <WEAKENING> <ON> t=<IDENTIFIER>
    { d = new DerivationByWeakening(startT.image, new Location(startT), c);
      d.getArgStrings().add(clauseFor(t));
      return d; }
  | LOOKAHEAD(2) t=<IDENTIFIER> (<MINUS>|<ON>)     { ErrorHandler.report("Missing keyword 'rule' or 'theorem'/'lemma' before name", new Location(t));
       throw new AssertionError("should not get here");     }
  | t=<IDENTIFIER>
    { d = new DerivationByPrevious(startT.image, new Location(startT), c);
      d.getArgStrings().add(clauseFor(t));    }    ( <COMMA> t=<IDENTIFIER> { d.getArgStrings().add(clauseFor(t)); } )*
	{ return d; }
}

Case Case() :
{ Token t,t2,t3; String s; Clause cl,ce=null; Case ca; Derivation d;
  List<Derivation> premises = new ArrayList<Derivation>();
}
{
  ( LOOKAHEAD(2) t=<CASE> cl=Expr() [<ASSUMES> ce=Expr()] <IS> { ca = new SyntaxCase(new Location(t), cl, ce); }

  | t=<CASE> <RULE>
    ( [<PREMISE>] t3=<IDENTIFIER> <COLON> ce=ExprToNL()
      { premises.add(new DerivationByAssumption(t3.image, new Location(t3), ce)); } )*
    <BAR> s=RuleName()
    t3=<IDENTIFIER> <COLON> ce=Expr() <IS>
    { ca = new RuleCase(new Location(t),
		   	 s,
		    	premises,
		    	new DerivationByAssumption(t3.image, new Location(t3), ce));
    }
  )

  ( d=Derivation() { ca.getDerivations().add(d); } )+
    <END> <CASE>
    { return ca; }
}


