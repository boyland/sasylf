/* 
 * Untyped Lambda Calculus with locations
 *
 * Author: Jonathan Aldrich
 * Modifications by John Boyland
 * 
 * This file defines the untyped lambda calculus with locations
 * and proves preservation of well-formed stores.
 *
 * This file is not yet extensively commented; see while1.slf or lambda.slf
 * for more of a "tutorial" introduction.
 */

package examples;

terminals fn s z cons var


/************************ SYNTAX **************************************/


syntax

e ::= fn x => e[x]
  |   x
  |   e e
  |   loc
 
loc ::= z
    |   s loc

st ::= *
   |   cons {loc, e, st}

Gamma ::= *
      |   Gamma, var x


/************************ JUDGMENTS **************************************/

// NB: this definition of lookup is ambiguous.

judgment lookup: st { loc } = e

---------------------------- lookup-1
(cons{loc, e, st}) {loc} = e

st{loc'} = e'
-------------------------------- lookup-2
(cons{loc, e'', st}) {loc'} = e'



judgment isvar: Gamma |- var e
assumes Gamma

------------------------- t-var
(Gamma, var x) |- var x




judgment well-formed: Gamma, st |- e
assumes Gamma

Gamma |- var e
------------------- wf-var
Gamma, st |- e

st{loc} = e
// The following line forbids cycles.
// Instead we should have a store typing separate
*, st |- e
-------------------- wf-loc
Gamma, st |- (loc)


(Gamma, var x), st |- e[x]
---------------------------------- wf-fn
Gamma, st |- (fn x => e[x])

Gamma, st |- e1
Gamma, st |- e2
----------------------- wf-app
Gamma, st |- (e1 e2)



judgment reduce: e -> e

-------------- r-loc
(loc) -> (loc)

-------------------------------- r-lam
(fn x => e[x]) -> (fn x => e[x])

e1 -> (fn x => e[x])
e[e2] -> e'
---------------------------- r-app
(e1 e2) -> e'


judgment equality: Gamma |- e == e
assumes Gamma

--------------- equality
Gamma |- e == e



/************************ THEOREMS **************************************/


lemma strengthen-wf: assumes Gamma
forall dwf: (Gamma, var x), st |- e exists Gamma, st |- e.

de: Gamma, st |- e by induction on dwf:
case rule

	d1: (Gamma, var x) |- var e
	------------------------------ wf-var
	d2: (Gamma, var x), st |- e
		
is
	d3: Gamma, st |- e by case analysis on d1:
	
	case rule
		------------------------------------- t-var
		d4: (Gamma', var x1, var x) |- var x1
	is
		d5: Gamma', var x1 |- var x1 by rule t-var
		d6: Gamma', var x1, st |- x1 by rule wf-var on d5
	end case
	
	end case analysis
end case
	
case rule

	d1: st{loc} = e'
	d2: *, st |- e'
	------------------------------------- wf-loc
	d3: (Gamma, var x), st |- loc
	
is
	d5: Gamma, st |- loc by rule wf-loc on d1, d2

end case
	
case rule

	d1: ((Gamma, var x), var x1), st |- e'[x1]
	------------------------------------------- wf-fn
	d2: (Gamma, var x), st |- (fn x1 => e'[x1])
	
is
	d3: (Gamma, var x1, var x), st |- e'[x1]		by exchange on d1
	d4: (Gamma, var x1), st |- e'[x1]				by induction hypothesis on d3
	d5: Gamma, st |- (fn x1 => e'[x1])				by rule wf-fn on d4
end case
	
case rule

	d1: (Gamma, var x), st |- e1
	d2: (Gamma, var x), st |- e2
	--------------------------------- wf-app
	d3: (Gamma, var x), st |- (e1 e2)

is
	d4: Gamma, st |- e1				by induction hypothesis on d1
	d5: Gamma, st |- e2				by induction hypothesis on d2
	d6: Gamma, st |- e1 e2			by rule wf-app on d4, d5
end case

end induction
end lemma


lemma wf-subst: assumes Gamma
    forall dwf1: (Gamma, var x), st |- e1[x]
    forall dwf2: Gamma, st |- e2
	exists 		 Gamma, st |- e1[e2].

dwf' : Gamma, st |- e1[e2] by induction on dwf1:

	case rule

		d1: (Gamma, var x), st |- e1'[x]
		d2: (Gamma, var x), st |- e2'[x]
		------------------------------------------ wf-app
		d3: (Gamma, var x), st |- (e1'[x] e2'[x])
		
	is
	
		d4 : Gamma, st |- e1'[e2]		by induction hypothesis on d1, dwf2
		d5 : Gamma, st |- e2'[e2]		by induction hypothesis on d2, dwf2
		d6 : Gamma, st |- (e1'[e2] e2'[e2]) by rule wf-app on d4, d5

	end case

	case rule

		d1: st{loc} = e 
		d2: *, st |- e
		------------------------------------ wf-loc
		d3: (Gamma, var x), st |- loc
		
	is
	
	    proof by rule wf-loc on d1, d2

	end case

	case rule

		d2: (Gamma, var x, var x1), st |- e[x][x1]
		------------------------------------------ wf-fn
		d3: (Gamma, var x), st |- (fn x1 => e[x][x1])
		
	is
		d4: (Gamma, var x1, var x), st |- e[x][x1]	by exchange on d2
		d4': (Gamma, var x1), st |- e2 by weakening on dwf2
		d5: (Gamma, var x1), st |- e[e2][x1]		by induction hypothesis on d4, d4'
		d6: Gamma, st |- (fn x1 => e[e2][x1])		by rule wf-fn on d5

	end case

	case rule

		d1: (Gamma, var x) |- var e1[x]
		------------------------------- wf-var
		d2: (Gamma, var x), st |- e1[x]
		
	is

		d3: Gamma, st |- e1[e2]			by case analysis on d1:
		
		case rule
	
			------------------------- t-var
			d4: (Gamma, var x) |- var x
			
		is
		
			d5: Gamma, st |- e2			by dwf2
				
		end case
		

		case rule
	
			------------------------------------ t-var
			d4: (Gamma', var x1, var x) |- var x1
			
		is
			d5: (Gamma', var x1, var x), st |- x1	by rule wf-var on d4
			d6: (Gamma', var x1), st |- x1			by lemma strengthen-wf on d5
				
		end case

		end case analysis	

	end case

end induction
end lemma

theorem preservation: forall dwf: (*), st |- e  forall de: e -> e' exists (*), st |- e'.

dwf' : (*), st |- e' by induction on de:

	case rule

		-------------- r-loc
		d2: (loc) -> (loc)

		is
	
		d3 : (*), st |- e'		by dwf

	end case

	case rule

		---------------------------------- r-lam
		d2: (fn x => e1[x]) -> (fn x => e1[x])

		is
	
		d3 : (*), st |- e'		by dwf

	end case

	case rule

		d1: e1 -> (fn x => e3[x])
		d2: e3[e2] -> e'
		---------------------------- r-app
		d3: (e1 e2) -> e'

		is
	
		d4 : (*), st |- e1 and
		d5 : (*), st |- e2 by case analysis on dwf:
		    case rule
		        d4: *, st |- e1
		        d5: *, st |- e2
		        ------------------ wf-app
		        _: *, st |- e1 e2
		    is
		        proof by d4,d5
		    end case
		    case rule
		        v: * |- var e
		        ------------------ wf-var
		        _: *, st |- e
		    is
		        proof by case analysis on v: end case analysis
		    end case
		end case analysis
		d6 : (*), st |- (fn x => e3[x])	by induction hypothesis on d4, d1
		d7 : (* , var x), st |- e3[x]	by case analysis on d6:
		    case rule
		        d8: (*, var x), st |- e3[x] 
		        ---------------------------- wf-fn
		        _: *, st |- fn x => e3[x]
		    is
		        proof by d8
		    end case
		    case  rule
                v: * |- var (fn x => e3[x])
                --------------------------- wf-var
                _: *, st |- fn x => e3[x]
            is
                proof by case analysis on v: end case analysis
            end case
        end case analysis
		d8 : (*), st |- e3[e2]			by lemma wf-subst on d7, d5
		d9 : (*), st |- e'				by induction hypothesis on d8, d2

	end case

end induction
end theorem