/*
 * SASyLF says you don't need to include variable cases
 * Here we generate an impossibility using:
 *  An equality judgment is created using a term T that occurs only in contextual situations
 *  The equality judgment is passed to a lemma without context.
 * Question:
 *   Which step is the one that is wrong?  I think it is the first,
 * because we don't want to start having to assume that non-contextual
 * judgments actually are contextual.
 * Difficulty: the term T is IMPLICIT in the use of the non-contextual rule.
 */
 
package edu.uwm.cs.structural;
 

terminals fn in Fn Unit unit contradiction
 
syntax
 
t ::= t t | x | fn x:T => t[x] | unit | Fn X => t[X]
 
T ::= Unit | X | T -> T

Gamma ::= * | Gamma, x:T | Gamma, X
 
 
judgment isvar : t:T in Gamma
assumes Gamma

--------------- var
x:T in (Gamma, x:T)
 

judgment typevar : T in Gamma
assumes Gamma

--------------- Var
X in (Gamma, X)
 

judgment equal: Gamma |- t = t
assumes Gamma
 
Gamma |- t1 = t1'
Gamma |- t2 = t2'
------------------------ equal-app
Gamma |- t1 t2 = t1' t2'
 
t:T in Gamma
--------------- equal-var
Gamma |- t = t

Gamma, x:T |- t[x] = t'[x]
------------------------------------ equal-fun
Gamma |- fn x:T => t[x] = fn x:T => t'[x]

-------------------- equal-unit
Gamma |- unit = unit


judgment type-equal: T == T

------ type-eq
T == T


judgment notvar : T !

------- NV-Unit
Unit !

---------- NV-Arrow
T1 -> T2 !


judgment absurd : contradiction


lemma type-never-var :
    forall e: T == T
    exists T ! .
    _: T! by case analysis on T:
	  case T1 -> T2 is
	    _: T1 -> T2! by rule NV-Arrow 
	  end case	
	  case Unit is
	    _: Unit! by rule NV-Unit
	  end case
    end case analysis
end lemma

lemma lam-type-not-var :
    forall ef: Gamma |- fn x:T => t[x] = fn x:T' => t'[x] 
    forall v: T in Gamma
    exists contradiction .
    ee: T == T by rule type-eq
    nv: T! by lemma type-never-var on ee
    _: contradiction by case analysis on v:
	case rule
	    ------------------ Var
	    _: X in (Gamma',X)
	is
	    _: contradiction by case analysis on nv: end case analysis
	end case
    end case analysis
end lemma

lemma problem :    
    exists contradiction .
    v: X in (*, X) by rule Var   
    e1: *, X, x:X |- unit = unit by rule equal-unit
    e2: *, X |- fn x:X => unit = fn x:X => unit by rule equal-fun on e1
    _: contradiction by lemma lam-type-not-var on e2, v
end lemma


