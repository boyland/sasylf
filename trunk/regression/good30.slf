// pattern matching a judgment with an assumption but a premise
// that doesn't use it caused case analysis to generate an impossible pattern
// which then cannot be satisfied.
package regression;

terminals fn Unit unit

syntax

t ::= x | unit | t t | fn x : T => t[x]

T ::= Unit | T -> T

Gamma ::= * | Gamma, x : T


judgment term-equal: t = t

    ----- term-eq
    t = t
    
    
judgment typing: Gamma |- t : T
assumes Gamma


    --------------------- T-Var
    Gamma, x : T |- x : T 

    --------------------- T-Unit
    Gamma |- unit : Unit

    Gamma |- t1 : T -> T'
    Gamma |- t2 : T
    ---------------------- T-App
    Gamma |- t1 t2 : T'
    
    Gamma, x:T |- t[x] : T'
    ---------------------------------- T-Abs
    Gamma |- fn x:T => t[x] : T -> T'
    
    
judgment test: Gamma |- t -> t
assumes Gamma

         t = t'
     -------------- Test
    Gamma |- t -> t' 
    
lemma silly:
    assumes Gamma
    forall d:Gamma, x:T |- t[x] -> t'
    exists t' = t'.
    proof by case analysis on d:
        case rule
            eq: t1 = t'
            ------------------------- Test
            _: Gamma, x:T |- t1 -> t'
        is
            _: t' = t' by rule term-eq
        end case
    end case analysis
end lemma